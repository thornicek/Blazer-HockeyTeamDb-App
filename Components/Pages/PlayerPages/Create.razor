@page "/players/create"
@using Microsoft.EntityFrameworkCore
@using BlazorTeamRegistrationApp.Models
@inject IDbContextFactory<BlazorTeamRegistrationApp.Data.BlazorTeamRegistrationContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Player</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Player" OnValidSubmit="AddPlayer" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="firstname" class="form-label">First Name:</label> 
                <InputText id="firstname" @bind-Value="Player.FirstName" class="form-control" /> 
                <ValidationMessage For="() => Player.FirstName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="lastname" class="form-label">Last Name:</label> 
                <InputText id="lastname" @bind-Value="Player.LastName" class="form-control" /> 
                <ValidationMessage For="() => Player.LastName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="height" class="form-label">Height:</label> 
                <InputNumber id="height" @bind-Value="Player.Height" class="form-control" /> 
                <ValidationMessage For="() => Player.Height" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="weight" class="form-label">Weight:</label> 
                <InputNumber id="weight" @bind-Value="Player.Weight" class="form-control" /> 
                <ValidationMessage For="() => Player.Weight" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="gamesplayed" class="form-label">Games Played:</label> 
                <InputNumber id="gamesplayed" @bind-Value="Player.GamesPlayed" class="form-control" /> 
                <ValidationMessage For="() => Player.GamesPlayed" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="goals" class="form-label">Goals:</label> 
                <InputNumber id="goals" @bind-Value="Player.Goals" class="form-control" /> 
                <ValidationMessage For="() => Player.Goals" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="assists" class="form-label">Assists:</label> 
                <InputNumber id="assists" @bind-Value="Player.Assists" class="form-control" /> 
                <ValidationMessage For="() => Player.Assists" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="points" class="form-label">Points:</label> 
                <InputNumber id="points" @bind-Value="Player.Points" class="form-control" /> 
                <ValidationMessage For="() => Player.Points" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dob" class="form-label">DoB:</label> 
                <InputDate id="dob" @bind-Value="Player.DoB" class="form-control" /> 
                <ValidationMessage For="() => Player.DoB" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/players">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Player Player { get; set; } = new Player{
        FirstName = string.Empty,
        LastName = string.Empty
    };

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddPlayer()
    {
        using var context = DbFactory.CreateDbContext();
        context.Player.Add(Player);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/players");
    }
}
